#pragma once

#include "math.hpp"
#include "../aliases.hpp"
#include "../util.hpp"
#include <glad/glad.h>

namespace nes{

struct Texture{
  std::vector<int> charset = {
    0,0,0,1,1,1,0,0,
    0,0,1,1,0,0,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,0,0,1,1,0,
    0,0,0,1,1,1,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,1,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,1,0,0,0,0,
    0,0,1,1,1,1,0,0,
    0,0,0,1,1,1,1,0,
    0,0,0,0,0,1,1,1,
    0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,0,
    0,0,1,1,0,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,1,1,1,1,0,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,0,0,0,
    0,0,1,1,1,1,0,0,
    0,0,1,1,0,1,1,0,
    0,0,1,1,0,0,1,1,
    0,1,1,1,1,1,1,1,
    0,0,1,1,0,0,0,0,
    0,0,1,1,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,0,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,0,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,0,1,1,0,0,
    0,0,0,0,1,1,0,0,
    0,0,0,0,1,1,0,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,1,1,1,0,
    0,1,1,0,0,0,0,0,
    0,0,1,1,0,0,0,0,
    0,0,0,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,0,1,1,1,0,0,
    0,0,1,1,0,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,0,0,
    0,1,1,0,0,1,1,0,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,1,1,0,0,1,1,0,
    0,0,1,1,1,1,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,1,1,1,1,1,
    0,0,1,1,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,0,0,1,1,
    0,0,0,1,1,1,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,0,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,0,1,1,
    0,1,1,1,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,1,1,0,
    0,1,1,1,1,1,0,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,0,0,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,0,1,1,0,0,1,1,
    0,0,0,1,1,0,1,1,
    0,0,0,0,1,1,1,1,
    0,0,0,1,1,1,1,1,
    0,0,1,1,1,0,1,1,
    0,1,1,1,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,1,1,0,
    0,0,0,0,0,1,1,0,
    0,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,1,0,1,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,0,1,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,1,1,1,
    0,1,1,0,1,1,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,1,1,0,1,1,
    0,1,1,1,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,1,0,1,1,
    0,0,1,1,0,0,1,1,
    0,1,0,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,0,1,1,1,1,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,0,0,1,1,
    0,0,0,1,1,1,1,1,
    0,0,1,1,1,0,1,1,
    0,1,1,1,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,0,0,1,1,1,1,0,
    0,0,1,1,0,0,1,1,
    0,0,0,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,1,1,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,1,0,1,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,1,1,1,0,0,
    0,0,0,0,1,0,0,0,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,0,0,0,1,1,
    0,1,1,0,1,0,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,1,1,1,1,1,
    0,1,1,1,0,1,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,0,1,1,
    0,1,1,1,0,1,1,1,
    0,0,1,1,1,1,1,0,
    0,0,0,1,1,1,0,0,
    0,0,1,1,1,1,1,0,
    0,1,1,1,0,1,1,1,
    0,1,1,0,0,0,1,1,
    0,0,0,0,0,0,0,0,
    0,1,1,0,0,1,1,0,
    0,1,1,0,0,1,1,0,
    0,1,1,0,0,1,1,0,
    0,0,1,1,1,1,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1,
    0,1,1,1,0,0,0,0,
    0,0,1,1,1,0,0,0,
    0,0,0,1,1,1,0,0,
    0,0,0,0,1,1,1,0,
    0,0,0,0,0,1,1,1,
    0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,1,1,0,0,0,
    0,0,0,0,0,0,0,0,
  };

  using pixel_color = gf::math::vec<u8, 3>;

  std::vector<pixel_color> pixels;
  gf::math::vec2 size;
  GLuint id;

  Texture(const gf::math::vec2& size, bool visual_mode = true){
    if (!visual_mode) return;

    static_assert(sizeof(gf::math::vec<u8, 3>) == 3);

    this->size = size;
    pixels.resize(size.x * size.y);

    glGenTextures(1, &id);
    glBindTexture(GL_TEXTURE_2D, id);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri (GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, size.x, size.y, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels.data());
  }

  auto set_pixel(const gf::math::vec2& position, const pixel_color& color){
    const auto [x, y] = position;

    if (!in_range(x, std::make_pair(0, size.x - 1))) return;
    if (!in_range(y, std::make_pair(0, size.y - 1))) return;

    pixels[y * size.x + x] = color;
  }

  auto print(const gf::math::vec2& position, const std::string& text){
    auto i = 0;
    for (auto c : text){
      auto sprite_index = 0; 
      if (in_range(c, { '0', '9' })){
        sprite_index = c - '0';
      }
      else if (in_range(c, { 'a', 'z' })){
        sprite_index = c - 'a' + 10;
      }
      else if (in_range(c, { 'A', 'Z' })){
        sprite_index = c - 'A' + 10;
      }
      else if (c == ' '){
        ++i;
        continue;
      }
      else if (c == ':'){
        sprite_index = 36;
      }
      else throw std::runtime_error("Unknown character");

      auto sprite_begin = sprite_index * 8 * 8;

      for (auto [x, y] : gf::math::range({ 8, 8 })){
        const auto pixel_data = charset[sprite_begin + y * 8 + 7 - x];

        const auto pixel_position = position + gf::math::vec2(x + i * 8, y);
        if (pixel_data) {
          set_pixel(pixel_position, Texture::pixel_color(255, 255, 255));
        }
        else{
          set_pixel(pixel_position, Texture::pixel_color(0, 0, 0));
        }
      }
      ++i;
    }
  }
};

} //namespace nes
